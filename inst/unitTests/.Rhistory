    complement

> library(GOstats)
Error in library(GOstats) : there is no package called ‘GOstats’
> library(GO.db)
Error in library(GO.db) : there is no package called ‘GO.db’
> library(Category)
Error in library(Category) : there is no package called ‘Category’
> library(org.Hs.eg.db)
> library(KEGG.db)
Error in library(KEGG.db) : there is no package called ‘KEGG.db’
> 
> symbol.entrez.map <- assignGeneIDs(genes)$mapped
Error in assignGeneIDs(genes) : could not find function "assignGeneIDs"
> 
> gene.universe = character(0)
> geneIDs <- unlist(symbol.entrez.map, use.names=FALSE)
Error in unlist(symbol.entrez.map, use.names = FALSE) : 
  object 'symbol.entrez.map' not found
> 
> go.params <- new("GOHyperGParams", geneIds=unique(geneIDs),
+                  universeGeneIds = gene.universe, annotation = "org.Hs.eg.db",
+                  ontology = 'BP', pvalueCutoff = 0.05, conditional = FALSE,
+                  testDirection = "over")
Error in getClass(Class, where = topenv(parent.frame())) : 
  “GOHyperGParams” is not a defined class
> 
> kegg.params <- new("KEGGHyperGParams", geneIds = unique(geneIDs),
+                    universeGeneIds = character(0), annotation = "org.Hs.eg.db",
+                    pvalueCutoff = 0.1, testDirection = "over")
Error in getClass(Class, where = topenv(parent.frame())) : 
  “KEGGHyperGParams” is not a defined class
> 
> go.bp.hgr <- hyperGTest(go.params)
Error in hyperGTest(go.params) : could not find function "hyperGTest"
> biocGet(c("GOstats", "GO.db", "KEGG.db"))
Bioconductor version 3.8 (BiocInstaller 1.31.1), ?biocLite for help
BioC_mirror: https://bioconductor.org
Using Bioconductor 3.8 (BiocInstaller 1.31.1), R 3.5.0 (2018-04-23).
Installing package(s) ‘GOstats’, ‘GO.db’, ‘KEGG.db’
also installing the dependencies ‘genefilter’, ‘Category’, ‘AnnotationForge’, ‘Rgraphviz’

trying URL 'https://bioconductor.org/packages/3.8/bioc/bin/macosx/el-capitan/contrib/3.5/genefilter_1.63.0.tgz'
Content type 'application/x-gzip' length 2118171 bytes (2.0 MB)
==================================================
downloaded 2.0 MB

trying URL 'https://bioconductor.org/packages/3.8/bioc/bin/macosx/el-capitan/contrib/3.5/Category_2.47.0.tgz'
Content type 'application/x-gzip' length 1267483 bytes (1.2 MB)
==================================================
downloaded 1.2 MB

trying URL 'https://bioconductor.org/packages/3.8/bioc/bin/macosx/el-capitan/contrib/3.5/AnnotationForge_1.23.0.tgz'
Content type 'application/x-gzip' length 4246805 bytes (4.1 MB)
==================================================
downloaded 4.1 MB

trying URL 'https://bioconductor.org/packages/3.8/bioc/bin/macosx/el-capitan/contrib/3.5/Rgraphviz_2.25.0.tgz'
Content type 'application/x-gzip' length 1559228 bytes (1.5 MB)
==================================================
downloaded 1.5 MB

trying URL 'https://bioconductor.org/packages/3.8/bioc/bin/macosx/el-capitan/contrib/3.5/GOstats_2.47.0.tgz'
Content type 'application/x-gzip' length 2070463 bytes (2.0 MB)
==================================================
downloaded 2.0 MB


The downloaded binary packages are in
	/var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T//RtmpXOkaaq/downloaded_packages
installing the source packages ‘GO.db’, ‘KEGG.db’

trying URL 'https://bioconductor.org/packages/3.8/data/annotation/src/contrib/GO.db_3.6.0.tar.gz'
Content type 'application/x-gzip' length 31763273 bytes (30.3 MB)
==================================================
downloaded 30.3 MB

trying URL 'https://bioconductor.org/packages/3.8/data/annotation/src/contrib/KEGG.db_3.2.3.tar.gz'
Content type 'application/x-gzip' length 1976342 bytes (1.9 MB)
==================================================
downloaded 1.9 MB

* installing *source* package ‘GO.db’ ...
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (GO.db)
* installing *source* package ‘KEGG.db’ ...
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (KEGG.db)

The downloaded source packages are in
	‘/private/var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T/RtmpXOkaaq/downloaded_packages’
Old packages: 'bit'
Update all/some/none? [a/s/n]: a

  There is a binary version available but the source version is later:
    binary source needs_compilation
bit 1.1-12 1.1-13              TRUE

Do you want to install from sources the package which needs compilation? (Yes/no/cancel) no
trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.5/bit_1.1-12.tgz'
Content type 'application/x-gzip' length 243803 bytes (238 KB)
==================================================
downloaded 238 KB


The downloaded binary packages are in
	/var/folders/qw/f4r8_r9513548zsbzxv17wg40000gp/T//RtmpXOkaaq/downloaded_packages
> library(GSEABase)
library(GOstats)
library(GO.db)
library(Category)
library(org.Hs.eg.db)
library(KEGG.db)

symbol.entrez.map <- assignGeneIDs(genes)$mapped

gene.universe = character(0)
geneIDs <- unlist(symbol.entrez.map, use.names=FALSE)

go.params <- new("GOHyperGParams", geneIds=unique(geneIDs),
                 universeGeneIds = gene.universe, annotation = "org.Hs.eg.db",
                 ontology = 'BP', pvalueCutoff = 0.05, conditional = FALSE,
                 testDirection = "over")

kegg.params <- new("KEGGHyperGParams", geneIds = unique(geneIDs),
                   universeGeneIds = character(0), annotation = "org.Hs.eg.db",
                   pvalueCutoff = 0.1, testDirection = "over")

go.bp.hgr <- hyperGTest(go.params)

library(GSEABase)
> library(GOstats)
Loading required package: Category


Attaching package: ‘GOstats’

The following object is masked from ‘package:AnnotationDbi’:

    makeGOGraph

> library(GO.db)
> library(Category)
> library(org.Hs.eg.db)
> library(KEGG.db)

KEGG.db contains mappings based on older data because the original resource was removed from the the public domain before the most recent update was produced. This package should now be considered deprecated and future versions of Bioconductor may not have it available.  Users who want more current data are encouraged to look at the KEGGREST or reactome.db packages

> 
> symbol.entrez.map <- assignGeneIDs(genes)$mapped
Error in assignGeneIDs(genes) : could not find function "assignGeneIDs"
> 
> gene.universe = character(0)
> geneIDs <- unlist(symbol.entrez.map, use.names=FALSE)
Error in unlist(symbol.entrez.map, use.names = FALSE) : 
  object 'symbol.entrez.map' not found
> 
> go.params <- new("GOHyperGParams", geneIds=unique(geneIDs),
+                  universeGeneIds = gene.universe, annotation = "org.Hs.eg.db",
+                  ontology = 'BP', pvalueCutoff = 0.05, conditional = FALSE,
+                  testDirection = "over")
Error in unique(geneIDs) : object 'geneIDs' not found
> 
> kegg.params <- new("KEGGHyperGParams", geneIds = unique(geneIDs),
+                    universeGeneIds = character(0), annotation = "org.Hs.eg.db",
+                    pvalueCutoff = 0.1, testDirection = "over")
Error in unique(geneIDs) : object 'geneIDs' not found
> 
> go.bp.hgr <- hyperGTest(go.params)
Error in hyperGTest(go.params) : object 'go.params' not found
> source("~/s/data/public/human/symToGeneID.R"); test_assignGeneIDs()

source("~/s/data/public/human/symToGeneID.R"); test_assignGeneIDs()
[1] "--- test_assignGeneIDs"
[1] TRUE
> library(GOstats)
library(GO.db)
library(Category)
library(org.Hs.eg.db)
library(KEGG.db)

symbol.entrez.map <- assignGeneIDs(genes)$mapped

gene.universe = character(0)
geneIDs <- unlist(symbol.entrez.map, use.names=FALSE)

go.params <- new("GOHyperGParams", geneIds=unique(geneIDs),
                 universeGeneIds = gene.universe, annotation = "org.Hs.eg.db",
                 ontology = 'BP', pvalueCutoff = 0.05, conditional = FALSE,
                 testDirection = "over")

kegg.params <- new("KEGGHyperGParams", geneIds = unique(geneIDs),
                   universeGeneIds = character(0), annotation = "org.Hs.eg.db",
                   pvalueCutoff = 0.1, testDirection = "over")

go.bp.hgr <- hyperGTest(go.params)

library(GOstats)
> library(GO.db)
> library(Category)
> library(org.Hs.eg.db)
> library(KEGG.db)
> 
> symbol.entrez.map <- assignGeneIDs(genes)$mapped
Error in mget(symbols, org.Hs.egSYMBOL2EG, ifnotfound = NA) : 
  object 'genes' not found
> 
> gene.universe = character(0)
> geneIDs <- unlist(symbol.entrez.map, use.names=FALSE)
Error in unlist(symbol.entrez.map, use.names = FALSE) : 
  object 'symbol.entrez.map' not found
> 
> go.params <- new("GOHyperGParams", geneIds=unique(geneIDs),
+                  universeGeneIds = gene.universe, annotation = "org.Hs.eg.db",
+                  ontology = 'BP', pvalueCutoff = 0.05, conditional = FALSE,
+                  testDirection = "over")
Error in unique(geneIDs) : object 'geneIDs' not found
> 
> kegg.params <- new("KEGGHyperGParams", geneIds = unique(geneIDs),
+                    universeGeneIds = character(0), annotation = "org.Hs.eg.db",
+                    pvalueCutoff = 0.1, testDirection = "over")
Error in unique(geneIDs) : object 'geneIDs' not found
> 
> go.bp.hgr <- hyperGTest(go.params)
Error in hyperGTest(go.params) : object 'go.params' not found
> 
print(load("~/github/projects/priceLab/cory/mef2c-targets-geneAnnotation/mef2c.tcx.RData"))
head(temp)
q()
library(MotifDb) 
igv
q()
> source("test_NoDnaModelBuilder.R")
source("test_NoDnaModelBuilder.R")
q()
source("test_NoDnaModelBuilder.R")
q()
source("test_NoDnaModelBuilder.R"); runTests()
source("test_NoDnaModelBuilder.R"); runTests()
q()
q()
source("test_NoDnaModelBuilder.R"); runTests()
source("test_NoDnaModelBuilder.R"); runTests()
source("test_NoDnaModelBuilder.R"); runTests()
traceback()
()
q()
source("test_NoDnaModelBuilder.R"); runTests()
traceback()
q()
source("test_NoDnaModelBuilder.R"); runTests()
q()
source("test_NoDnaModelBuilder.R"); runTests()
tfList
class(tfList)
Q
q()
source("test_NoDnaModelBuilder.R"); runTests()
tfList
length(tf.candidates)
(tf.candidates)
mtx.cor[1:10, 1:10]
mtx.cor[targetGene, "STAT4"]
tbl.model
c
q()
source("test_NoDnaModelBuilder.R"); runTests()
c
c
names(tbl.model)
x <- tbl.model
tbl.model
all(expected.tfs %in% tbl.model$gene)
q()
source("test_NoDnaModelBuilder.R"); runTests()
source("test_RegionsMotifMatchingModelBuilder.R")
runTests()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); runTests()
traceback()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); runTests()
traceback()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); runTests()
tbl.model
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
models$two$model$pcaMax
models$one$model
q()
source("test_trenaSGM.R"); runTests()
coi
c
coi
c
source("test_trenaSGM.R"); runTests()
coi
c
coi
c
traceback()
coi
c
coi
c
tbl.summary
q()
source("test_ModelBuilder.R"); runTests()
q()
source("test_ModelBuilder.R"); runTests()
runTests()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
names(strategies)
length(strategies)
lapply(strategies, function(s) s$type)
unlist(lapply(strategies, function(s) s$type), use.names=FALSE)
Q
q()
source("test_trenaSGM.R"); runTests()
n
strategy.types
c
n
strategy.types
c
source("test_trenaSGM.R"); runTests()
c
c
traceback()
q()
source("test_trenaSGM.R"); runTests()
c
c
traceback()
q()
source("test_trenaSGM.R"); runTests()
c
c
traceback()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
colnames(tbl.model)
orderBy
orderBy %in% colnames(tbl.model)
c
orderBy %in% colnames(tbl.model)
c
orderBy %in% colnames(tbl.model)
c
orderBy %in% colnames(tbl.model)
orderBy
colnames(tbl.model)
obj
ls(obj@state)
c
traceback()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
orderBy
colnames(tbl.model)
c
colnames(tbl.model)
length(models)
lapply(models, dim)
lapply(models, length)
lapply(models, function(model) lapply(model, dim))
Q
length(x)
lapply(x, function(model) lapply(model, dim))
spec.4
names(spec.4)
wdth(100)
names(spec.4)
genome
targetGene
builder <- NoDnaModelBuilder(genome, targetGene,  spec.4, quiet=TRUE)
builder <- NoDnaModelBuilder(genome, targetGene,  spec.4, quiet=FALSE)
build(builder)
traceback()
q()
source("test_NoDnaModelBuilder.R")
runTests()
source("test_trenaSGM.R")
builder <- NoDnaModelBuilder(genome, targetGene,  spec.4, quiet=FALSE)
builder <- NoDnaModelBuilder(genome, targetGene,  spec.4, quiet=FALSE)
build(builder)
q()
source("test_trenaSGM.R")
builder <- NoDnaModelBuilder(genome, targetGene,  spec.4, quiet=FALSE)
build(builder)
tfList
Q
q()
source("test_trenaSGM.R")
q()
source("test_trenaSGM.R")
builder <- NoDnaModelBuilder(genome, targetGene,  spec.4, quiet=FALSE)
build(builder)
targetGene
solverNames
tf.candidates
tfList
dim(mtx.cor)
mtx.cor
tfPrefilterCorrelation
names(which(abs(mtx.cor[targetGene,]) >= tfPrefilterCorrelation))
dim(all.known.tfs.mtx)
length(all.known.tfs.mtx)
candidates.tfs
candidates.tfs
candidate.tfs
tfList
mtx.tfs
Q
q()
source("test_trenaSGM.R")
source("test_trenaSGM.R")
test_constructor()
source("test_trenaSGM.R"); test_trem2_fpdb()
length(models)
lapply(models, function(x) lapply(x, dim))
models$one$model
head(models$two$model)
summarizeModels(sgm, models)
c
summarizeModels(sgm, orderBy="rfScore", maxTFpredictors=6)
c
c
c
c
source("test_trenaSGM.R"); test_summarizeModels()
x <- calculate(sgm, strategies[1])
x <- calculate(sgm, strategies[2])
x <- calculate(sgm, strategies[3])
x <- calculate(sgm, strategies[4])
q()
source("test_trenaSGM.R"); 
calculate(sgm, list(spec.4))
names(spec.4)
strategies <- list(spec.4)
calculate(sgm, strategeis)
calculate(sgm, strategies)
q()
q()
source("test_trenaSGM.R"); 
traceback()
q()
source("test_trenaSGM.R"); 
targetGene
length(tf.candidates.final)
length(candidate.tfs)
(candidate.tfs)
tfPrefilterCorrelation
high.correlation.genes <- names(which(abs(mtx.cor[targetGene,]) >= tfPrefilterCorrelation))
length(high.correlation.genes)
(high.correlation.genes)
Q
q()
source("test_trenaSGM.R"); 
c
x$model
x
source("test_trenaSGM.R"); 
c
c
c
c
c
c
c
c
c
tbl.summary
q()
