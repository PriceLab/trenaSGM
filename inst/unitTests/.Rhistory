print(load("../extdata/mayo.tcx.RData"))
class(tbl)
tbl[1:10, 1:10]
mtx <- as.matrix(tbl)
mtx[1:10, 1:10]
save(mtx, file="../extdata/mayo.tcx.RData")
source("tets_trena_SGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
warnings()
x <- query(MotifDb, c("sapiens", "jaspar2018"))
x <- query2(MotifDb, c("sapiens", "jaspar2018"))
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
class(sgm)
is(sgm)
q()
source("test_trenaSGM.R"); runTests()
traceback()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
obj@strategy
obj@strategies
Q
q()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
obj@strategy
names(strategy)
names(obj@strategy)
wdth(100)
names(obj@strategy)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
n
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
all.available
s$databases
names(dbs)
.getFootprints <- function(db, chrom, start, stop)
{
    query.p0 <- "select loc, chrom, start, endpos from regions"
    query.p1 <- sprintf("where chrom='%s' and start > %d and endpos < %d", chrom, start, stop)

    query.regions <- paste(query.p0, query.p1)
    tbl.regions <- dbGetQuery(db, query.regions)
    if(nrow(tbl.regions) == 0)
       return(data.frame())
    loc.set <- sprintf("('%s')", paste(tbl.regions$loc, collapse="','"))
    query.hits <- sprintf("select * from hits where loc in %s", loc.set)
    invisible(dbGetQuery(db, query.hits))

} # .getFootprints

dbConnection
dbName <- unlist(s$databases)[1]
dbName
s$database.host
names(s)
s$db.host
dbConnection <- dbConnect(PostgreSQL(), user="trena", password="trena", host=s$db.host, dbname=dbName)
tbl.hits <- getFootprints(dbConnection, chrom, start, end)
s$chrom
dim(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
n
n
n
n
n
n
n
n
n
n
n
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
dim(tbl.fp)
head(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
dim(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
dim(expression.matrix)
names(s)
names(obj@strategy)
wdth(100)
names(obj@strategy)
obj@strategy
wdth(160)
head(tbl.fp)
regex <- "(?<species>)-(source)-(.*?)$"
regexpr(regex, tbl.fp$name[1], per=TRUE)
source("test_FootprintDatabaseModelBuilder.R"); runTests()
head(tbl.fp)
regex
regexpr("(<species>)-(source)(.*$)", tbl.fp$name[1], perl=TRUE)
regexpr("(^<species>).*$", tbl.fp$name[1], perl=TRUE)
regexpr("(?<chromosome>chr.*):(?<startPos>\\d+)-(?<endPos>\\d+)", "chr5:120-500", perl=TRUE)
regexpr("(?<chromosome>chr.*):(?<startPos>\\d+)-(?<endPos>\\d+)", "chr5:120-500", perl=TRUE)
source("test_FootprintDatabaseModelBuilder.R"); runTests()
head(tbl.fp)
head(rownames(MotifDb))
head(MotifDb)
head(names(MotifDb))
grep("Mmusculus-jaspar2016-Mycn-MA0104.3", names(MotifDb))
mcols(MotifDb)[grep("Mmusculus-jaspar2016-Mycn-MA0104.3", names(MotifDb)),]
indices <- lapply(tbl.fp$name, function(rowname) grep(rowname, names(MotifDb)))
length(indices)
length(unique(indices))
indices <- lapply(unique(tbl.fp$name), function(rowname) grep(rowname, names(MotifDb)))
mcols(MotifDb)[indices, "providerId"]
dim(mcols(MotifDb))
length(mcols(MotifDb[indices])$providerId)
head(indices)
indices <- unlist(lapply(unique(tbl.fp$name), function(rowname) grep(rowname, names(MotifDb))))
head(indices)
length(mcols(MotifDb[indices])$providerId)
(mcols(MotifDb[indices])$providerId)
(mcols(MotifDb[indices])$providerName)
grep("^MA", mcols(MotifDb[indices])$providerName, v=TRUE)
unique(grep("^MA", mcols(MotifDb[indices])$providerName, v=TRUE))
unique(grep("^MA[0-9]", mcols(MotifDb[indices])$providerName, v=TRUE))
mcols(MotifDb[indices])[1,]
mcols(MotifDb[indices])[, "geneSymbol"]
head(unique.matrices)
unique.matrices <- unique(grep("^MA[0-9]", mcols(MotifDb[indices])$providerName, v=TRUE))
head(unique.matrices)
x <- lapply(head(unique.matrices), function(motif) motifToGene(MotifDb, motif, "tfclass"))
x
tbl.motifs <- do.call(rbind, tbls.motifs)
tbls.motifs <- lapply(head(unique.matrices), function(motif) motifToGene(MotifDb, motif, "tfclass"))
tbl.motifs <- do.call(rbind, tbls.motifs)
dim(tbl.motifs)
(tbl.motifs)
intersect(motifDb.tfs, tfClass.tfs)
         motifDb.tfs <- mcols(MotifDb[indices])[, "geneSymbol"]
intersect(motifDb.tfs, tfClass.tfs)
lower("MotifDb")
tolower("MotifDb")
slotNames(obj)
dim(tbl.fp)
head(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
n
dim(tbl.fp)
wdth(300)
head(tbl.fp)
dim(tbl.fp)
length(indices)
head(indices)
wdth(100)
indices
grep(head(tbl.fp$name)
)
head(tbl.fp$name)
all(tbl.fp$name %in% names(MotifDb))
length(which(tbl.fp$name %in% names(MotifDb)))
length(which(!tbl.fp$name %in% names(MotifDb)))
which(!tbl.fp$name %in% names(MotifDb))
tbl.fp$name[185:188]
grep("SwissRegulon-NANOG", names(MotifDb))
grep("SwissRegulon-NANOG", names(MotifDb), v=TRUE)
length(c(missing, matched))
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
head(tbl.fp)
x <- associateTranscriptionFactors(MotifDb, tbl.fp, source="MotifDb", expand.rows=TRUE)
traceback()
wdth(100); colnames(tbl.fp)
x <- associateTranscriptionFactors(MotifDb, tbl.fp, source="MotifDb", expand.rows=TRUE)
x <- associateTranscriptionFactors(MotifDb, tbl.fp, source="TFClass", expand.rows=TRUE)
dim(x)
Q
q()
x <- associateTranscriptionFactors(MotifDb, tbl.fp, source="TFClass", expand.rows=TRUE)
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
dim(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
dim(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
length(indices)
dim(tbl.fp)
length(missing); length(matched)
c
obj@strategy$tfMapping
dim(tbl.fp)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
obj@strategy$tfMapping
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
obj@strategy$tfMapping
dim(tbl.fp)
createGeneModel(trena)
n
n
n
n
source("https://github.com/paul-shannon/projects/blob/master/utils/geneIdMapping/symToGeneID.R")
source("https://raw.githubusercontent.com/paul-shannon/projects/master/utils/geneIdMapping/symToGeneID.R")
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
targetGene
dim(expression.matrix)
genomeName
tfPrefilterCorrelation
solverName
solverNames
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
missing <- which(!tbl.fp$name %in% names(MotifDb))
length(missing)
head(mcols(MotifDb[indices])[, "providerName"])
length(mcols(MotifDb[indices])[, "providerName"])
length(matched)
length(indices)
head(missing); head(matched)
length(x)
head(x, n=100)
tbl.fp$shortMotif <- mcols(MotifDb[x])[, "providerName"]
length(which(is.na(x)))
length(matched); length(indices)
head(matched); head(indices)
head(matched)
matched
wdth(100)
matched
head(tbl.fp)
tbl.fp[, c("name", "shortMotif")]
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
targetGene
c
targetGene
solverNames
tfPrefilterCorrelation
dim(expressionMatrix)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
c
traceback()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
colnames(tbl.fp)
wdth(80)
colnames(tbl.fp)
colnames(tbl.fp)
dim(tbl.model)
createGeneModel
selectMethod("createGeneModel", "trena")
selectMethod("createGeneModel", "Trena")
colnames(tbl.regulatoryRegions)
unique.tfs.from.regulatory.regions <- unique(tbl.regulatoryRegions$geneSymbol)
head(unique.tfs.from.regulatory.regions)
head(tbl.regulatoryRegions)
tbl.fp <- associateTranscriptionFactors(MotifDb, tbl.fp, source=obj@strategy$tfMapping, expand.rows=TRUE)w
Q
runTests()
c
n
runTests()
x <- associateTranscriptionFactors(MotifDb, tbl.fp, source=obj@strategy$tfMapping, expand.rows=TRUE)
head(tbl.fp)
Q
runTests()
n
n
n
head(x)
tbl.fp$shortMotif[matched] <- mcols(MotifDb[x])[, "providerName"]
head(tbl.fp$shortMotif)
c
head(tbl.fp$shortMotif)
head(tbl.fp$geneSymbol)
obj@strategy$tfMapping
fpm.ids <- tbl.fp[, "motifName"]
head(fpm.ids)
head(tbl.fp)
head(tbl.fp$name)
head(tbl.fp$geneSymbol)
head(tbl.fp[, "motifName"])
match(head(tbl.fp[, "motifName"]), names(as.list(MotifDb)))
mcols(MotifDb)[match(head(tbl.fp[, "motifName"]), names(as.list(MotifDb))), c("geneSymbol", "pubmedID")]
tbl.fp$motifName
c
head(tbl.regulatoryRegions)
Q
runTests()
c
tbl.fp$geneSymbol
tbl.fp$geneSymbolasdf
head(tbl.fp$name)
head(tbl.fp$geneSymbol)
tbl.fp$geneSymbol
head(tbl.regulatoryRegions$geneSymbol)
intersect(tbl.regulatoryRegions$geneSymbol, rownames(expression.matrix))
n
n
tbl.model
n
tbl.model.fpReduced.mdb
c
Q
q()
