head(tbl.fp$geneSymbol)
tbl.fp$geneSymbol
head(tbl.regulatoryRegions$geneSymbol)
intersect(tbl.regulatoryRegions$geneSymbol, rownames(expression.matrix))
n
n
tbl.model
n
tbl.model.fpReduced.mdb
c
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
c
c
tbl.model
c
c
750  x 750
750 * 750
750 * 750 / 44000
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
c
c
c
c
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
names(x)
x$model
selectMethod("createGeneModel", "trena")
selectMethod("createGeneModel", "Trena")
args(EnsembleSolver)
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
dim(x$model)
x$model
dim(x$model)
length(all.known.tfs)
head(all.known.tfs)
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
length(all.known.tfs); length(all.known.tfs.mtx); 
length(all.known.tfs); length(all.known.tfs.mtx); 
length(all.knonw.tfs.mtx)
x <- cor(t(mtx.tfs))
x[1:10, 1:10]
which(x["TREM2",] > 0.4)
"TREM2" %in% rownames(x)
"TREM2" %in% rownames(expression.mtx)
"TREM2" %in% rownames(expression.matrix)
dim(mtx.tfs)
which(mtx.cor["TREM2",] > 0.4)
names(which(mtx.cor["TREM2",] > 0.4))
length(tfs.candidates)
dim(tbl.regulatoryRegions)
head(tbl.regulatoryRegions$geneSymbol)
intersect(tbl.regulatoryRegions$geneSymbol, tf.candidates)
length(mcols(MotifDb)$geneSymbol)
length(unique(mcols(MotifDb)$geneSymbol))
length(unique(mcols(query(MotifDb, "sapiens"))$geneSymbol))
length(unique(mcols(query(MotifDb, "mus"))$geneSymbol))
human <- (unique(mcols(query(MotifDb, "sapien"))$geneSymbol))
mouse <- (unique(mcols(query(MotifDb, "mus"))$geneSymbol))
length(intersect(tolower(human), tolower(mouse)))
length(tf.candidates)
tf.candidates.with.motifs
dim(tbl.regulatoryRegions.filtered)
dim(mtx.tfs.filtered)
tbl.model
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
traceback()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
names(x)
x
tbl.model[order(tbl.model$rfScore, decreasing=TRUE),]
tbl.model
tbl.model$gene
tbl.regions
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
build.spec
source("test_FootprintDatabaseModelBuilder.R"); runTests()
tbl.model
tbl.model$gene
tbl.model
x$model
head(tbl.model, n=15)
dim(tbl.model)
tbl.model
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
tbl.model
dim(tbl.model)
tbl.model
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
tbl.model
dim(tbl.model)
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_trenaSGM.R")
strategies
q()
source("test_trenaSGM.R")
strategies
names(strategies)
print(load(system.file(package="trenaSGM", "extdata", "mayo.tcx.RData")))
Q
q()
source("test_FootprintDatabaseModelBuilder.R")
fpBuilder
q()
source("test_FootprintDatabaseModelBuilder.R")
fpBuilder
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_trenaSGM.R")
names(strategies)
name <- "one"
strategy$type
Q
name
name <- "one"
strategy$type
builder
x <- build(builder)
traceback()
strategy
n
builder
x <- build(builder)
traceback
x <- build(builder)
traceback()
strategy$end
strategy$tss
Q
start; end
end - start
c
strategies[1]
strategies[1]$end
with(strategy, start)
with(strategies[1], start)
strategies[1]$start
Q
q()
source("test_trenaSGM.R"); runTests()
names(strategy)
with(strategy, title)
with(strategy, type
)
with(strategy, c(title, type))
with(strategy, c(title, type, chrom)
)
with(strategy, c(title, type, chrom))
with(strategy, c(title, type, chrom, start))
with(strategy, c(title, type, chrom, start, end))
with(strategy, c(title, type, chrom, start, end, tss))
wdth(120)
names(strategy)
with(strategy, c(title, type, chrom, start, end, tss, db.host, databases))
c
c
names(models)
q()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
c
c
names(x)
names(x$one)
names(x$two)
x$one$model
x$two$model
x$one$model
head(x$two$model, n=15)
names(x$one)
dim(x$one$regulatoryRegions)
(x$one$regulatoryRegions)
x$one$model
head(x$two$model, n=15)
Q
q()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
c
c
c
c
c
args(createGeneModel)
Q
q()
source("test_trenaSGM.R"); runTests()
c
c
q()
source("test_trenaSGM.R"); runTests()
c
names(models)
models$one$model
tbl <- models$one$model
ifelse(nrow(tbl) < maxTFpredictors? nrow(tbl):maxTFpredictors)
nrow(tbl)
maxTFpredictors
ifelse(nrow(tbl) < maxTFpredictors, nrow(tbl), maxTFpredictors)
maxTFpredictors <- 10
ifelse(nrow(tbl) < maxTFpredictors, nrow(tbl), maxTFpredictors)
model <- models[[1]]
model$model
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
n
n
n
n
q)
q()
source("test_trenaSGM.R"); test_summarizeModels()
n
n
n
n
n
n
n
n
n
top.tfs
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
top.tfs
n
q()
source("test_trenaSGM.R"); test_summarizeModels()
top.tfs
tbl.model
tbl.model$gene
tfs.this.model
nrow(tbl.model)
tbl.model$gene[1:5]
tbl.model$gene[1:maxTFpredictors]
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
top.tfs
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
dim(tbl.model)
tbl.model
ifelse(nrow(tbl.model) < maxTFpredictors, tbl.model$gene, tbl.model$gene[1:maxTFpredictors])
maxTFpredictors
nrow(tbl.model) <- maxTFpredictors
nrow(tbl.model) < maxTFpredictors
tbl.model$gene[1:maxTFpredictors]
ifelse(nrow(tbl.model) < maxTFpredictors, tbl.model$gene, tbl.model$gene[1:maxTFpredictors])
        tfs.this.model <- tbl.model$gene
        if(nrow(tbl.model) > maxTFpredictors)
           tfs.this.model <- tfs.this.model[1:maxTFpredictors]

tfs.this.model
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
n
c
c
top.tfs
tbl.model[1:10,]
obj@state$models[[1]]$model
tbl.model
orderBy
orderBy
tbl.model[1:5, "rfScore"]
tbl.model[1:5, orderBy]
tfs.this.model
tfs.this.model
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
c
c
top.tfs
tbl.model
models$one$model
top.tfs
length(obj@state$strategies)
lapply(obj@state$strategies, function(strategy) strategy$title)
unlist(lapply(obj@state$strategies, function(strategy) strategy$title), use.names=FALSE)
?data.frame
?data.frame
tbl <- data.frame()
count
seq_len(3)
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
c
source("test_trenaSGM.R"); test_trem2_fpdb()
c
source("test_trenaSGM.R"); test_summarizeModels()
n
n
n
n
c
c
empty.column
tbl
n
tbl
cbind(tbl, empty.column)
cbind(tbl, empty.column)
tbl <- cbind(tbl, empty.column)
tbl <- cbind(tbl, empty.column)
tbl
model.columns
tbl
tbl
length(model.names) == length(models)
length(model.names) == length(models)
models[[1]]$model
match(top.tfs, tbl.model$gene, nomatch=failed.match)
match(top.tfs, tbl.model$gene, nomatch=failed.match)
Q
q)(
q()
source("test_trenaSGM.R"); test_summarizeModels()
c
c
tbl.summary
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
c
c
tbl
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
tbl
model.names
tbl[, c(model.names, "rank.sum", "observed")]
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
tbl
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
tbl
n
n
n
n
n
tbl
x[[1]]$model
c
x[[1]]$model
Q
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
length(tbls)
tbls[[1]]
strategy$orderBy
obj@strategy$orderBy
names(obj@strategy)
wdth(100)
names(obj@strategy)
406179 + 46870 + 64350
c
names(obj@strategy)
Q
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
n
n
n
n
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
c
source("test_trenaSGM.R"); test_trem2_fpdb()
         orderByColumn <- obj@strategy$orderModealBy
orderByColumn
         orderByColumn <- obj@strategy$orderModelBy
orderByColumn
names(tbls[[2]])
names(tbls[[1]])
tbl.tmp
tbls[[1]]
c
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
length(modesl)
length(models)
names(models)
models$one$model
c
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
models$one$model
models$two$model
head(models$two$model)
models$one$model
names(models$one)
dim(models$one$regulatoryRegions)
dim(models$two$regulatoryRegions)
models$one$model$rfScore
args(sort)
Q
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
runTests()
c
c
runTests
 test_summarizeModels()
c
tbl.summary
names(models)
x$one$model
tbl.summary
sum(tbl.summary[1,])
sum(tbl.summary[1,1:2])
apply(tbl.summary, 1, function(row) sum(row[1:2}))
apply(tbl.summary, 1, function(row) sum(row[1:2]))
apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE))
unlist(apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE)), use.names=FALSE)
as.numeric(apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE)))
checkEquals(as.numeric(apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE))), tbl.summary[, "rank.sum"])
length(which(is.na(tbl.sumaary[, 1]))
)
length(which(is.na(tbl.summary[, 1]))
)
length(which(is.na(tbl.summary[, 1])))
Q
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_ModelBuilder.R"); runTests(
source("test_ModelBuilder.R");
runTests
runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
is(fpBuilder)
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_trenaSGM.R"); runTests()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); runTests()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
names(obj@strategy)
class(obj@strategy$pfms)
Q
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
dim(tbl.motifs)
wdth(300)
head(tbl.motifs)
tbl.motifs.mdb$g
head(tbl.motifs.mdb$geneSymbol)
names(tbls)
tbls$model
Q
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
c
q()
