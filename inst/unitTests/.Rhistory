x$one$model
x$two$model
x$one$model
head(x$two$model, n=15)
names(x$one)
dim(x$one$regulatoryRegions)
(x$one$regulatoryRegions)
x$one$model
head(x$two$model, n=15)
Q
q()
source("test_trenaSGM.R"); runTests()
source("test_trenaSGM.R"); runTests()
c
c
c
c
c
args(createGeneModel)
Q
q()
source("test_trenaSGM.R"); runTests()
c
c
q()
source("test_trenaSGM.R"); runTests()
c
names(models)
models$one$model
tbl <- models$one$model
ifelse(nrow(tbl) < maxTFpredictors? nrow(tbl):maxTFpredictors)
nrow(tbl)
maxTFpredictors
ifelse(nrow(tbl) < maxTFpredictors, nrow(tbl), maxTFpredictors)
maxTFpredictors <- 10
ifelse(nrow(tbl) < maxTFpredictors, nrow(tbl), maxTFpredictors)
model <- models[[1]]
model$model
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
n
n
n
n
q)
q()
source("test_trenaSGM.R"); test_summarizeModels()
n
n
n
n
n
n
n
n
n
top.tfs
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
top.tfs
n
q()
source("test_trenaSGM.R"); test_summarizeModels()
top.tfs
tbl.model
tbl.model$gene
tfs.this.model
nrow(tbl.model)
tbl.model$gene[1:5]
tbl.model$gene[1:maxTFpredictors]
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
top.tfs
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
dim(tbl.model)
tbl.model
ifelse(nrow(tbl.model) < maxTFpredictors, tbl.model$gene, tbl.model$gene[1:maxTFpredictors])
maxTFpredictors
nrow(tbl.model) <- maxTFpredictors
nrow(tbl.model) < maxTFpredictors
tbl.model$gene[1:maxTFpredictors]
ifelse(nrow(tbl.model) < maxTFpredictors, tbl.model$gene, tbl.model$gene[1:maxTFpredictors])
        tfs.this.model <- tbl.model$gene
        if(nrow(tbl.model) > maxTFpredictors)
           tfs.this.model <- tfs.this.model[1:maxTFpredictors]

tfs.this.model
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
n
c
c
top.tfs
tbl.model[1:10,]
obj@state$models[[1]]$model
tbl.model
orderBy
orderBy
tbl.model[1:5, "rfScore"]
tbl.model[1:5, orderBy]
tfs.this.model
tfs.this.model
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
c
c
top.tfs
tbl.model
models$one$model
top.tfs
length(obj@state$strategies)
lapply(obj@state$strategies, function(strategy) strategy$title)
unlist(lapply(obj@state$strategies, function(strategy) strategy$title), use.names=FALSE)
?data.frame
?data.frame
tbl <- data.frame()
count
seq_len(3)
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
c
source("test_trenaSGM.R"); test_trem2_fpdb()
c
source("test_trenaSGM.R"); test_summarizeModels()
n
n
n
n
c
c
empty.column
tbl
n
tbl
cbind(tbl, empty.column)
cbind(tbl, empty.column)
tbl <- cbind(tbl, empty.column)
tbl <- cbind(tbl, empty.column)
tbl
model.columns
tbl
tbl
length(model.names) == length(models)
length(model.names) == length(models)
models[[1]]$model
match(top.tfs, tbl.model$gene, nomatch=failed.match)
match(top.tfs, tbl.model$gene, nomatch=failed.match)
Q
q)(
q()
source("test_trenaSGM.R"); test_summarizeModels()
c
c
tbl.summary
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
c
c
tbl
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
tbl
model.names
tbl[, c(model.names, "rank.sum", "observed")]
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
tbl
Q
q()
source("test_trenaSGM.R"); test_summarizeModels()
tbl
n
n
n
n
n
tbl
x[[1]]$model
c
x[[1]]$model
Q
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
length(tbls)
tbls[[1]]
strategy$orderBy
obj@strategy$orderBy
names(obj@strategy)
wdth(100)
names(obj@strategy)
406179 + 46870 + 64350
c
names(obj@strategy)
Q
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
n
n
n
n
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
c
source("test_trenaSGM.R"); test_trem2_fpdb()
         orderByColumn <- obj@strategy$orderModealBy
orderByColumn
         orderByColumn <- obj@strategy$orderModelBy
orderByColumn
names(tbls[[2]])
names(tbls[[1]])
tbl.tmp
tbls[[1]]
c
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
length(modesl)
length(models)
names(models)
models$one$model
c
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
models$one$model
models$two$model
head(models$two$model)
models$one$model
names(models$one)
dim(models$one$regulatoryRegions)
dim(models$two$regulatoryRegions)
models$one$model$rfScore
args(sort)
Q
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
source("test_trenaSGM.R"); test_trem2_fpdb()
c
c
q()
source("test_trenaSGM.R"); test_trem2_fpdb()
runTests()
c
c
runTests
 test_summarizeModels()
c
tbl.summary
names(models)
x$one$model
tbl.summary
sum(tbl.summary[1,])
sum(tbl.summary[1,1:2])
apply(tbl.summary, 1, function(row) sum(row[1:2}))
apply(tbl.summary, 1, function(row) sum(row[1:2]))
apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE))
unlist(apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE)), use.names=FALSE)
as.numeric(apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE)))
checkEquals(as.numeric(apply(tbl.summary, 1, function(row) sum(row[1:2], na.rm=TRUE))), tbl.summary[, "rank.sum"])
length(which(is.na(tbl.sumaary[, 1]))
)
length(which(is.na(tbl.summary[, 1]))
)
length(which(is.na(tbl.summary[, 1])))
Q
q()
source("test_trenaSGM.R"); runTests()
q()
source("test_ModelBuilder.R"); runTests(
source("test_ModelBuilder.R");
runTests
runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
is(fpBuilder)
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_trenaSGM.R"); runTests()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); runTests()
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
names(obj@strategy)
class(obj@strategy$pfms)
Q
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
dim(tbl.motifs)
wdth(300)
head(tbl.motifs)
tbl.motifs.mdb$g
head(tbl.motifs.mdb$geneSymbol)
names(tbls)
tbls$model
Q
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
c
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.model()
c
tbl.model
Q
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.motifDB.model()
tbl.model
tbl.model$gene
tbl.regions
start
)
Q
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.motifDB.model()
c
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.TFClass.model()
c
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.TFClass.model()
n
n
n
tbl.model
Q
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.TFClass.model()
names(tbls)
obj@strategy$orderByColumn
Q
q()
source("test_RegionsMotifMatchingModelBuilder.R"); test_build.trem2.2200bp.TFClass.model()
tbls$model
targetGene
obj@targetGene
obj@chrom
obj@chr
obj@chromosome
slotnames(obj)
slotNames(obj)
c
c
print(load("~/github/projects/priceLab/cory/trem2-model-for-dc-talk/ENSG00000095970.RData"))
tbl.trena
  library(org.Hs.eg.db)
  keytypes(org.Hs.eg.db)

head(tbl.trena$gene)
  ensembl.ids <- c("ENSG00000128604", "ENSG00000185811", "ENSG00000104903", "ENSG00000066336", "ENSG00000245848")
 grep("ENSEM", keytypes(org.Hs.eg.db), ignore.case=TRUE, value=TRUE)
  ensembl.ids <- c("ENSG00000128604", "ENSG00000185811", "ENSG00000104903", "ENSG00000066336", "ENSG00000245848")
  select(org.Hs.eg.db, keys=ensembl.ids, keytype="ENSEMBL", columns=c("SYMBOL", "ENSEMBL"))

ensembl.ids <- tbl.trena$gene
tbl.map <-  select(org.Hs.eg.db, keys=ensembl.ids, keytype="ENSEMBL", columns=c("SYMBOL", "ENSEMBL"))
tbl.map
head(tbl.model)
print(load("~/github/projects/priceLab/cory/trem2-model-for-dc-talk/ENSG00000095970.RData"))
head(tbl.trena)
rownames(tbl.trena) <- tbl.map$SYMBOL
dim(tbl.trena)
dim(tbl.map)
head(tbl.map)
which(duplicated(tbl.map$ENSEMBL))
tbl.map <- tbl.map[-which(duplicated(tbl.map$ENSEMBL)),]
rownames(tbl.trena) <- tbl.map$SYMBOL
head(tbl.trena, n=10)
tbl.model
head(tbl.trena, n=16)
head(tbl.trena, n=20)
Q
q()
source("test_FootprintDatabaseModelBuilder.R")
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
source("test_FootprintDatabaseModelBuilder.R"); runTests()
obj@strategy$tfMapping
c
dim(tbl.model)
tbl.model
n
n
n
n
n
n
c
c
c
source("test_FootprintDatabaseModelBuilder.R"); test_build.10kb.fimo.tfclass.mapping.cor04()
c
c
top.tfs
dim(tbl.model)
tbl.model
top.tfs
top.tfs[1:10]
dim(tbl.eLocs)
tbl.enhancers
tbl.enhancers
max(tbl.enhancers$end) - min(tbl.enhancers$start)
q()
source("test_FootprintDatabaseModelBuilder.R"); test_constructor()
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
q()
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
q()
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
q()
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
dim(tbl.fp)
c
tbl.model
c
q()
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
c
c
c
c
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
c
c
c
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
c
c
c
dim(tbl.model.2)
(tbl.model.2)
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
c
c
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
c
tbl.model
c
tbl.model.2
Q
source("test_FootprintDatabaseModelBuilder.R"); test_build.small.fimo.motifDB.mapping.cor04()
c
c
c
c
c
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
c
c
c
c
c
c
c
traceback()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
c
c
top.10.tfs
tbl.model
tbl.model$gene[1:10]
tbl.regions
41162986 - 41165186
tbl.model.3
tbl.model.2
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
Q
q()
source("test_FootprintDatabaseModelBuilder.R"); runTests()
c
tbl.model
tbl.model.2
tbl.model.3
q()
